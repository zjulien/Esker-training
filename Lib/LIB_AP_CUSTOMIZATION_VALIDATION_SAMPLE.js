/* LIB_DEFINITION{
  "name": "LIB_AP_CUSTOMIZATION_VALIDATION",
  "scriptType": "SERVER",
  "libraryType": "Lib",
  "comment": "Validation Script AP customization callbacks",
  "require": []
}*/
/* eslint no-empty-function: "off", no-unused-vars: "off" */
/**
 * @file Lib.AP.Customization.Validation library: validation script AP customization callbacks
 */

/**
 * Package AP extraction script customization callbacks
 * @namespace Lib.AP.Customization.Validation
 */

// eslint-disable-next-line no-redeclare
var Lib = Lib || {};
Lib.AP = Lib.AP || {};
Lib.AP.Customization = Lib.AP.Customization || {};

(function (parentLib)
{
	/**
	 * @lends Lib.AP.Customization.Validation
	 */
	parentLib.Validation = {

		/**
		 * Allows you to define custom user exists added for this customer
		 * Functions defined in this scope will be accessible from outside this library
		 * They can be called the following way Lib.AP.Customization.Validation.CustomUserExits.GetCopyFileOwnerLogin()
		 *  @example
		 * <pre><code>
		 * CustomUserExits:
		 * {
		 *		GetCopyFileOwnerLogin: function()
		 *		{
		 *			return Sys.Parameters.GetInstance("AP").GetParameter("Z_TopAccountServiceUser", "");
		 *		}
		 * },
		 * </code></pre>
		 */
		CustomUserExits:
		{
		},

		/**
		* @namespace Lib.AP.Customization.Validation.InvoiceExporter
		* @memberof Lib.AP.Customization.Validation
		*/
		InvoiceExporter:
		{
			/**
			* Allows you to customize the name of the invoice XML file generated by the Vendor invoice process.
			* This user exit is called from the validation script of the Vendor invoice process, when the invoice is posted or when the payment is released.
			* @returns {string} The name of the XML file or null to keep the default filename
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @example
			* <pre><code>
			* GetXmlFilename: function ()
			* {
			*	var suffix = "toPay";
			*	if (Lib.AP.WorkflowCtrl.GetNbRemainingContributorWithRole(Lib.AP.WorkflowCtrl.roles.approver) > 0)
			*	{
			*		suffix = "toValidate";
			*	}
			*	return Data.GetValue("MSNEx") + suffix;
			* }
			* </code></pre>
			*/
			GetXmlFilename: function ()
			{

			},

			/**
			* Allows you to customize the name of the invoice image file generated by the Vendor invoice process.
			* This user exit is called from the validation script of the Vendor invoice process, when the invoice is posted or when the payment is released.
			* @returns {string} The name of the image file or null to keep the default filename
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @example
			* <pre><code>
			* GetImageFilename: function ()
			* {
			*	var suffix = "toPay";
			*	if (Lib.AP.WorkflowCtrl.GetNbRemainingContributorWithRole(Lib.AP.WorkflowCtrl.roles.approver) > 0)
			*	{
			*		suffix = "toValidate";
			*	}
			*	return Data.GetValue("MSNEx") + suffix;
			* }
			* </code></pre>
			*/
			GetImageFilename: function ()
			{

			},

			/**
			* Allows you to customize the invoice XML file generated by the Vendor invoice process. The customizations made through this user exit concern only XML nodes originating from the Vendor invoice process header fields.
			* This user exit is called from the validation script of the Vendor invoice process, when the invoice is posted or when the payment is released
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @param {Lib.FlexibleFormToXML.ExportMode} exportMode The current exportMode integer value (0=allExcept or 1=onlyIncluded)
			* @param {Lib.FlexibleFormToXML.FieldsRules} fieldsRules The current rules for the flexible form fields
			* @returns {Lib.FlexibleFormToXML.FieldsRules} The updated rules about the fields to include or exclude
			* @example
			* <pre><code>
			* GetFieldsRules: function (exportMode, fieldsRules)
			* {
			*	// In exclude export mode add InvoiceStatus in xml export for NON-PO invoices
			*	var invoiceType = Data.GetValue("InvoiceType__");
			*	var index = fieldsRules.excludedFields.indexOf("InvoiceStatus__");
			*	if (exportMode == 0 && invoiceType === "Non-PO Invoice" && index !== -1)
			*	{
			*		fieldsRules.excludedFields.splice(index, 1);
			*	}
			*	return fieldsRules;
			* }
			* </code></pre>
			* <pre><code>
			* GetFieldsRules: function (exportMode, fieldsRules)
			* {
			*	// In include export mode add my customized field in xml export for NON-PO invoices
			*	var invoiceType = Data.GetValue("InvoiceType__");
			*	if (exportMode == 1 && invoiceType === "Non-PO Invoice")
			*	{
			*		fieldsRules.includedFields.push("Z_CustomizedField__");
			*	}
			*	return fieldsRules;
			* }
			* </code></pre>
			*/
			GetFieldsRules: function (exportMode, fieldsRules)
			{
				return fieldsRules;
			},

			/**
			* Allows you to customize the invoice XML file generated by the Vendor invoice process. The customizations made through this user exit concern only XML nodes originating from the Vendor invoice process tables.
			* This user exit is called from the validation script of the Vendor invoice process, when the invoice is posted or when the payment is released
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @param {Lib.FlexibleFormToXML.ExportMode} exportMode The current exportMode integer value 0 (allExcept) or 1 (onlyIncluded)
			* @param {Lib.FlexibleFormToXML.TablesRules} tablesRules The current rules for the flexible form tables
			* @returns {Lib.FlexibleFormToXML.TablesRules} The updated rules about the tables to include or exclude
			* @example
			* <pre><code>
			* // Add LineItems__ WBSElement__,  WBSElementID__ and also TradingPartner__ for GLLines
			* GetTablesRules: function (exportMode, tablesRules)
			* {
			*	if (exportMode == 0)
			*	{
			*		for (var i = 0; i < tablesRules.length; i++)
			*		{
			*			if (tablesRules[i].name === "LineItems__")
			*			{
			*				var POLine = tablesRules[i].excludedConditionalColumns.conditionalTable.PO.excludedColumns;
			*				var GLLine = tablesRules[i].excludedConditionalColumns.conditionalTable.GL.excludedColumns;
			*
			*				POLine.splice(POLine.indexOf('WBSElement__'), 1);
			*				POLine.splice(POLine.indexOf('WBSElementID__'), 1);
			*
			*				GLLine.splice(GLLine.indexOf('TradingPartner__'), 1);
			*				GLLine.splice(GLLine.indexOf('WBSElement__'), 1);
			*				GLLine.splice(GLLine.indexOf('WBSElementID__'), 1);
			*			}
			*		}
			*	}
			*	return tablesRules;
			* }
			* </code></pre>
			*/
			GetTablesRules: function (exportMode, tablesRules)
			{
				return tablesRules;
			},

			/**
			* Allows you to specify names for the XML nodes corresponding to custom fields of the Vendor invoice process.
			* This user exit is called from the validation script of the Vendor invoice process, when the invoice is posted or when the payment is released
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @param {Lib.FlexibleFormToXML.ExportMode} exportMode The current exportMode integer value 0 (allExcept) or 1 (onlyIncluded)
			* @param {Lib.FlexibleFormToXML.ModifiedNodeNameMappings} modifiedNodeNameMappings The current fields mapping
			* @returns {Lib.FlexibleFormToXML.ModifiedNodeNameMappings} The updated fields mapping to include or exclude
			* @example
			* <pre><code>
			* // Add a mapping to put the value of custom field Z_GroupId__ to xml field AdditionalField1
			* GetModifiedNodeNameMappings: function (exportMode, modifiedNodeNameMappings)
			* {
			*	modifiedNodeNameMappings.Z_GroupId__ = "AdditionalField1";
			*	return modifiedNodeNameMappings;
			* }
			* </code></pre>
			*/
			GetModifiedNodeNameMappings: function (exportMode, modifiedNodeNameMappings)
			{
				return modifiedNodeNameMappings;
			},

			/**
			* Allows you to override some fields values in the resulting XML.
			* This user exit is called from the validation script of the Vendor invoice process, when the invoice is posted or when the payment is released
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @param {Lib.FlexibleFormToXML.ModifiedFieldValuesMapping} modifiedFieldValuesMapping The current fields values mapping
			* @returns {Lib.FlexibleFormToXML.ModifiedFieldValuesMapping} The updated fields values
			* @example
			* <pre><code>
			* // Add a mapping to set the due date empty for NON-PO invoices
			* GetFieldValuesMapping: function (modifiedFieldValuesMapping)
			* {
			*	var invoiceType = Data.GetValue("InvoiceType__");
			*	if (invoiceType === "Non-PO Invoice")
			*	{
			*		modifiedFieldValuesMapping.DueDate__ = ""
			*	}
			*	return modifiedFieldValuesMapping;
			* }
			* </code></pre>
			*/
			GetFieldValuesMapping: function (modifiedFieldValuesMapping)
			{
				return modifiedFieldValuesMapping;
			},

			/**
			* Allows you to customize the value of variables and fields of the process to which invoice files are submitted when invoices are posted in the ERP via Esker Loader.
			* This user exit is called from the validation script of the Vendor invoice process, when the invoice is posted or when the payment is released
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @param {xTransport} erpNotifierProcess The xTransport object of the ERPNotifer that will be created
			* @example
			* <pre><code>
			* CustomizeERPNotifier: function (erpNotifierProcess)
			* {
			*	var vars = erpNotifierProcess.GetUninheritedVars();
			*	vars.AddValue_Date("InvoiceDate__", Data.GetValue("InvoiceDate__"), true);
			* }
			* </code></pre>
			*/
			CustomizeERPNotifier: function (erpNotifierProcess)
			{

			},

			/**
			* Allows you to specify whether an XML file should be sent to the ERP when archiving an invoice.
			* This user exit is called from the validation script of the Vendor invoice process when archiving an invoice
			* If the Accounts Payable module is integrated with NAV, when the user clicks Archive in Vendor invoice process:
			* - The name of the XML file is suffixed with _Archive.
			* - The XML file contains the manually entered ERP invoice number.
			*
			* This mechanism is used by the version 1.4.6 of the NAV integration kit. If an XML file with _Archive suffixed to its name is detected in NAV, a link to the invoice in the Accounts Payable module is added to the invoice in NAV.
			* @memberof Lib.AP.Customization.Validation.InvoiceExporter
			* @example
			* <pre><code>
			* ShouldExportXMLWhenArchiving: function ()
			* {
			*	return true;
			* }
			* </code></pre>
			*/
			ShouldExportXMLWhenArchiving: function ()
			{
				return false;
			}
		},


		/**
		* Specifics customization for SAP
		* @namespace Lib.AP.Customization.Validation.SAP
		* @memberof Lib.AP.Customization.Validation
		*/
		SAP:
		{
			/**
			* Allows you to customize the SAP header information transmitted through the BAPI parameters of the FIHeaderSet function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the FI module of SAP.
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} documentHeader The DOCUMENTHEADER structure that will be send to SAP
			* @example
			* <pre><code>
			* OnFIHeaderSet: function (params, documentHeader)
			* {
			* 	documentHeader.SetValue("SAPFIELD", Data.GetValue("MyNewField__"));
			* }
			* </code></pre>
			*/
			OnFIHeaderSet: function (params, documentHeader)
			{
			},

			/**
			* Allows you to customize the header dates, invoice date and clearing date in the clearing form.
			* This user exit is called from the validation script of the Vendor invoice clearing.
			* @memberof Lib.AP.Customization.Validation.SAP
			* @example
			* <pre><code>
			*	CustomizeClearingHeaderDates: function (Data)
			*	{
			* 		var latestInvoiceDate = null;
			*		var lineItems = Data.GetTable("LineItems__");
			*		for (var idx = 0; idx < lineItems.GetItemCount(); idx++)
			*		{
			*			var line = lineItems.GetItem(idx);
			*			var lineType = line.GetValue("LineType__");
			*			if (lineType === "Vendor")
			*			{
			*				var invoiceDate = line.GetValue("InvoiceDate__");
			*				if (!latestInvoiceDate || latestInvoiceDate < invoiceDate)
			*				{
			*					latestInvoiceDate = invoiceDate;
			*				}
			*			}
			*		}
			*		if (latestInvoiceDate)
			*		{
			*			return {
			*				postingDate: latestInvoiceDate,
			*				invoiceDate: latestInvoiceDate
			*			};
			*		}
			*		return null;
			*	}
			* </code></pre>
			*/
			CustomizeClearingHeaderDates: function ()
			{
			},


			/**
			* Allows you to customize the SAP vendor information transmitted through the BAPI parameters of the FIAddVendorLine function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the FI module of SAP
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} accountPayableItem The ACCOUNTPAYABLE structure that will be send to SAP
			* @param {Object} currencyAmountItem TThe CURRENCYAMOUNT structure that will be send to SAP
			*/
			OnFIAddVendorLine: function (params, accountPayableItem, currencyAmountItem)
			{
			},

			/**
			* Allows you to customize the SAP non-PO line information transmitted through the BAPI parameters of the FIAddGLLine function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the FI module of SAP
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} line The line item used to fill the SAP structures
			* @param {Object} accountGLItem The ACCOUNTGL structure that will be send to SAP
			* @param {Object} currencyAmountItem TThe CURRENCYAMOUNT structure that will be send to SAP
			* @example
			* <pre><code>
			* OnFIAddGLLine: function (params, line, accountGLItem, currencyAmountItem)
			* {
			* 	accountGLItem.SetValue("CS_TRANS_T", line.GetValue("Z_Transaction_type__"));
			* }
			* </code></pre>
			*/
			OnFIAddGLLine: function (params, line, accountGLItem, currencyAmountItem)
			{
			},

			/**
			* Allows you to customize the SAP tax line information transmitted through the BAPI parameters of the FIAddTaxLine function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the FI module of SAP
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} sapTaxAccount The tax account retrieved from SAP
			* @param {Object} accountTaxItem The ACCOUNTTAX structure that will be send to SAP
			* @param {Object} currencyAmmountTax The CURRENCYAMOUNT structure that will be send to SAP
			*/
			OnFIAddTaxLine: function (params, sapTaxAccount, accountTaxItem, currencyAmmountTax)
			{
			},

			/**
			* Allows you to customize the SAP header information transmitted through the BAPI parameters of the MMHeaderSet function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the MM module of SAP
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} headerData The HEADERDATA structure that will be send to SAP
			*/
			OnMMHeaderSet: function (params, headerData)
			{
			},

			/**
			* Allows you to customize the SAP PO line information transmitted through the BAPI parameters of the MMAddPOLine function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the MM module of SAP
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} line The line item used to fill the SAP structures
			* @param {Object} poItemData The current PO item information
			* @param {Object} itemData The ITEMDATA structure that will be send to SAP
			*/
			OnMMAddPOLine: function (params, line, poItemData, itemData)
			{
			},

			/**
			* Allows you to customize the SAP non-PO line information transmitted through the BAPI parameters of the MMAddGLLine function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the MM module of SAP
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} line The line item used to fill the SAP structures
			* @param {Object} accountGLItem The ACCOUNTGL structure that will be send to SAP
			* @example
			* <pre><code>
			* OnMMAddGLLine: function (params, line, accountGLItem)
			* {
			* 	accountGLItem.SetValue("CS_TRANS_T", line.GetValue("Z_Transaction_type__"));
			* }
			* </code></pre>
			*/
			OnMMAddGLLine: function (params, line, accountGLItem)
			{
			},

			/**
			* Allows you to customize the SAP tax data transmitted through the BAPI parameters of the MMAddTaxData function in the Lib_AP_SAP_Invoice script library.
			* This user exit is called from the validation script of the Vendor invoice process, when posting an invoice in the MM module of SAP
			* @memberof Lib.AP.Customization.Validation.SAP
			* @param {Object} params The BAPI structure that will be send to SAP
			* @param {Object} taxCodeValues Tax information
			* @param {Object} taxDataItem The TAXDATA structure that will be send to SAP
			*/
			OnMMAddTaxData: function (params, taxCodeValues, taxDataItem)
			{
			}
		},

		/**
		* Specifics customization for Workflow
		* @namespace Lib.AP.Customization.Validation.Workflow
		* @memberof Lib.AP.Customization.Validation
		*/
		Workflow:
		{
			/**
			* By default, a read access on the vendor invoice is granted to:
			* 1. The contributors of workflow (determined by the workflow rules) - can include GL/Account or cost center managers
			* 2. The cost center managers independently of the ones determined by workflow rules (since sprint S247)
			* 3. The full list of managers for these users (since S245)
			* Use this function to override the 2nd list.
			* The managers of the users returned here will also be granted a read access (use the UpdateListOfManagersWithReadRight user
			* exit to customize this)
			* @memberof Lib.AP.Customization.Validation.Workflow
			* @param {Array<string>} workflowContributors the list of contributors logins computed by the workflow (1rst list)
			* @returns {Array<string>} return the list of extra contributors you want to grant a read access to.
			* Returning null will not override the 2nd list.
			* Returning an empty list will disable the 2nd list (workflow contributors will keep their read access).
			* @example
			* <pre><code>
			* GetListOfExtraUsersWithReadRight: function (contributorsLogin)
			* {
			* 	// Get the list of GL/Account managers (instead of the cost center manager by default)
			* 	var GLAccounts = [];
			* 	var lineItems = Data.GetTable("LineItems__");
			* 	var nbItems = lineItems.GetItemCount();
			* 	for (var i = 0; i < nbItems; i++)
			* 	{
			* 		var line = lineItems.GetItem(i);
			* 		var gl = line.GetValue("GLAccount__");
			* 		if (gl && GLAccounts.indexOf(gl) < 0)
			* 		{
			* 			GLAccounts.push(gl);
			* 		}
			* 	}
			*
			* 	var list = [];
			* 	if (GLAccounts.length > 0)
			* 	{
			* 		var filter = Sys.Helpers.LdapUtil.FilterAnd(
			* 			"(" + Lib.P2P.GetCompanyCodeFilter(Data.GetValue("CompanyCode__")) + ")",
			* 			Sys.Helpers.LdapUtil.FilterIn("Account__", GLAccounts)
			* 		).toString();
			*
			* 		Sys.GenericAPI.Query("AP - G/L accounts__", filter, ["Manager__"], function (result, error)
			* 		{
			* 			if (error || !result)
			* 			{
			* 				return;
			* 			}
			*
			* 			for (var i = 0; i < result.length; i++)
			* 			{
			* 				var r = result[i];
			* 				if (r.Manager__ && list.indexOf(r.Manager__) === -1)
			* 				{
			* 					list.push(r.Manager__);
			* 				}
			* 			}
			* 		}, null, -1, { useConstantQueryCache: true });
			* 	}
			*
			* 	return list;
			* },
			* </code></pre>
			*/
			GetListOfExtraUsersWithReadRight: function (workflowContributors)
			{
			},

			/**
			* By default, a read access on the vendor invoice is granted to:
			* 1. The contributors of workflow (determined by the workflow rules) - can include GL/Account or cost center managers
			* 2. The cost center managers independently of the ones determined by workflow rules (since sprint S247)
			* 3. The full list of managers for these users (since S245)
			* Manager should be able to see invoices of their subordinate regardless of the amount triggering a workflow operation.
			* Use this function to override the 3rd list.
			* @memberof Lib.AP.Customization.Validation.Workflow
			* @param {Array<string>} contributorsLogin the list of contributors. Also including the contributors added in GetListOfExtraUsersWithReadRight.
			* @param {Array<string>} managersList a list of managers found in table P2P - User properties__ based on the list of contributors computed by the workflow
			* @returns {Array<string>} return a list of specific managers to give read right. If you return a empty list, that means managers shouldn't be able to see invoices regardless of the amount triggering a workflow operation.
			* @example
			* <pre><code>
			* UpdateListOfManagersWithReadRight: function (contributorsLogin, managersList)
			* {
			*	managersList.push("david.ceo@sample.com");
			* 	return managersList;
			* }
			* </code></pre>
			*/
			UpdateListOfManagersWithReadRight: function (contributorsLogin, managersList)
			{
			}
		},

		/**
		 * Structure that will contain the compliance information for the current invoice.
		 * @typedef InvoiceComplianceInfo
		 * @property {boolean} reject - set to true if the invoice should be auto reject (default is false)
		 * @property {boolean} [forAllActionType] - set to true if you want the auto-reject occurs for all action types (reprocessing and manual submission through interface) (default is false)
		 * @property {string} [reason] - the reason of the reject, if the invoice is to be reject and no reason specified the default "Invoice is not compliant" will be applied
		 * @property {string} [message] - the message for the reject, if the invoice is to be reject and no reason specified the default "Invoice doesn't match requirement" will be applied
		 */

		/**
		 * Called when in the validation script when comming just after the extraction before the touchless try.
		 * Allows you to auto-reject the invoice if it doesn't match your specified requirement. It will be ignored in case of reprocessing or manual submission throught the interface
		 * @memberof Lib.AP.Customization.Validation
		 * @returns {InvoiceComplianceInfo} invoiceComplianceInfo - structure that will contain the compliance information for the current invoice
		 * <pre><code>
		 *	GetInvoiceComplianceInformation: function()
		 *	{
		 *		// For example, if you want to auto-reject all PO-Invoices comming from the Vendor Portal and where no PO# could be found on the document
		 *
		 *		var isPOInvoice = Lib.AP.InvoiceType.isPOInvoice();
		 *		var isFromPortal = !Sys.Helpers.IsEmpty(Data.GetValue("PortalRuidEx__"));
		 *		var hasNoOrderNumber = Sys.Helpers.IsEmpty(Data.GetValue("OrderNumber__"));
		 *
		 *		if (isPOInvoice && isFromPortal && hasNoOrderNumber)
		 *		{
		 *			// feed the structure
		 *			// labels should be added in language files
		 *			return {
		 *				reject: true,
		 *				reason: "Invoice is not compliant",
		 *				message: Language.Translate("Invoice doesn't match requirement")
		 *			};
		 *		}
		 *		return null;
		 *	}
		 * </code></pre>
		 */
		GetInvoiceComplianceInformation: function ()
		{

		},

		/**
		* Called at the begining of the validation script.
		* Allows you to add a new validation action in the Vendor invoice process or to edit existing validation actions.
		* This user exit is called from the validation script of the Vendor invoice process
		* @memberof Lib.AP.Customization.Validation
		* @param {Object} validationActionMap validation script actions definition, add new actions into this object (key must be value of Data.GetActionType() in lower case)
		* @example
		* <pre><code>
		* ExtendActionMap: function (validationActionMap)
		* {
		*	validationActionMap.endworkflow = {
		*		"execute": function () {
		*			if (Data.GetValue("InvoiceStatus__") === Lib.AP.InvoiceStatus.ToApprove )
		*			{
		*				var usr = Lib.AP.WorkflowCtrl.usersObject.GetUser(Data.GetValue("LastValidatorUserId__"));
		*				var userVars = usr.GetVars();
		*				var contributor = {
		*					contributorId : Lib.AP.WorkflowCtrl.workflowUI.CreateUniqueContributorId(userVars.GetValue_String("Login", 0) + Lib.AP.WorkflowCtrl.roles.apEnd),
		*					role : "",
		*					login : "",
		*					email : "",
		*					name : "System",
		*					action : "unblockPaymentManually",
		*					date : new Date(),
		*					approved : true,
		*					comment : "Payment unblocked automatically, payment was unblocked manually on the ERP"
		*				};
		*				Lib.AP.WorkflowCtrl.workflowUI.EndWorkflow(contributor);
		*				Data.SetValue("InvoiceStatus__", Lib.AP.InvoiceStatus.ToPay);
		*			}
		*			else
		*			{
		*				Log.Error("endWorkflow custom action call ignored, wrong invoice status " + Data.GetValue("InvoiceStatus__"));
		*				Process.PreventApproval();
		*			}
		*		},
		*		"requireValidation":false
		*	};
		*
		*	// Customize globals
		*	// Include some fields in the automation rate report
		*	headerFieldsListForRecognitionStatistics.push("Z_Extracted_CustomField__");
		*	lineItemsFieldsListForRecognitionStatistics.push("Z_Extracted_LineItemCustomField__");
		* }
		* </code></pre>
		*/
		ExtendActionMap: function (validationActionMap)
		{
		},

		/**
		* Allows you to customize the Vendor invoice process when a user performs an action.
		* This user exit is called at the end of the validation script, right after the action is performed
		* If all necessary conditions are not met, the action is not performed and the user exit is not called.
		* For example, if a required field is empty when the AP specialist clicks the Post button, it is detected by the validation script. In this case, the invoice is not posted and the user exit is not called.
		* @memberof Lib.AP.Customization.Validation
		* @param {String} actionType validation script type called (return value of Data.GetActionType())
		* @param {String} actionName validation script action called in lower case ("onexpiration" if Process.AutoValidatingOnExpiration() or return value of Data.GetActionName() in lower case)
		* @param {Object} contributor current Workflow contributor when the action is called
		* @example
		* <pre><code>
		* onActionEnd: function (actionType, actionName, contributor)
		* {
		*	if (Lib.AP.WorkflowCtrl.IsEnded() &&
		*		contributor &&
		*		contributor.role === Lib.AP.WorkflowCtrl.roles.approver &&
		*		contributor.action === "approve" &&
		*		contributor.approved )
		*	{
		*		var globalPdfCommmand = "-instxt %infile[1]% -blt \"Arial\" 12 black -erase #FFFFFF -inflate 1 -XY 5 15 \""+contributor.date+"\" 1 -blt \"Arial\" 12 black -erase #FFFFFF -inflate 1 -XY 5 30 \""+contributor.login+" : "+ contributor.action+"\" 1";
		*		var options = {RemoveGDRTiffFile:false};
		*		// options = {RemoveGDRTiffFile:true}; // Functional example deactivated by default to avoid autolearning issues. If you really want the preview to be up to date uncomment the line
		*		if(Attach.PDFCommands(globalPdfCommmand, options))
		*		{
		*			Log.Info("pdf command executed");
		*		}
		*		else
		*		{
		*			Log.Error("error pdfCommand");
		*		}
		*	}
		* </code></pre>
		*/
		onActionEnd: function (actionType, actionName, contributor)
		{
		},


		/**
		* Use this function to change billing information
		* OnBilling is responsible to manage error, include eventual calling to Process.PreventApproval()
		* @returns {boolean} false to indicate an error occurred and ask the process to stop the validation script execution.
		*/
		OnBilling: function ()
		{
			return true;
		},

		/**
		* Use this function to override the standard validity date, for the waiting state of ERP integration (default 24 hours timeout)
		* @memberof Lib.AP.Customization.Validation
		* @param {string} validityDate the default computed validityDateTime (Now + 24 hours)
		* @returns {string|null} Return the new Date to override the validityDateTime, if returns null does not override the default validityDateTime
		* @example
		* <pre><code>
		* SetERPWaitingValidityDate: function (validityDate)
		* {
		*  // Increase the timeout from 24 to 48 hours
		*  validityDate.setHours(validityDate.getHours() + 24);
		*  return validityDate;
		*}
		* </code></pre>
		*/
		SetERPWaitingValidityDate: function (validityDate)
		{
			return null;
		},

		/**
		* Use this function to change the subject of the transport.
		* This subject will be visible on the billing logs and could be displayed in views and report.
		* The SetTransportSubject user exit will be called for any validation action with valid vendor invoice data.
		* @param {string} subject the precomputed subject
		* @returns {string} the subject to set on transport. Return null, empty or the precomputed subject to keep the standar behavior
		*/
		SetTransportSubject: function (subject)
		{
			return null;
		},
		/**
		* Use this function to rebuild the workflow after the checkgoodsreceipt action
		* Rebuilding the workflow will allow to correctly compute contributors in case of price/quantity mismatch for instance
		* /!\ The manually added contributors will be removed if the Rebuild action is called
		* @returns {boolean} set to true to rebuild the workflow (default is false)
		*/
		ShouldRebuildWFAfterCheckGoodsReceipt: function ()
		{
			return false;
		}
	};

	/**
	 * To define custom functions corresponding to business behaviors:
	 * Create a object in which Functions defined in this scope will only be accessible within this library
	 * They can be called the following way CustomHelpers.MyCustomHelper()
	 * New objects can be defined to isolate several functions linked to a feature (i.e. : VendorHelpers)
	 *  @example
	 * <pre><code>
	 * var CustomHelpers =
	 * {
	 *		ResetValidity: function () {
	 *			// Set the ValidityDateTime as in the extraction script (SubmitDateTime + 16 months)
	 *			var validityDT = Data.GetValue("SubmitDateTime");
	 *			validityDT.setMonth(validityDT.getMonth() + 16);
	 *			Data.SetValue("ValidityDateTime", validityDT);
	 *		}
	 * };
	 * </code></pre>
	 */
	// Uncomment here
	// var CustomHelpers =
	// {
	// };

})(Lib.AP.Customization);
