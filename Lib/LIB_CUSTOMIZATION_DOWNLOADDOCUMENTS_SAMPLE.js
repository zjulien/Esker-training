/* eslint no-empty-function: "off", no-unused-vars: "off" */
/**
 * @file Lib.Customization.DownloadDocuments library: define customization callbacks for zip documents feature
 */

/**
 * Specific Server side User Exits for the docwnload document feature
 * @class Lib.Customization.DownloadDocuments
*/

/* LIB_DEFINITION
{
	"name": "LIB_CUSTOMIZATION_DOWNLOADDOCUMENTS",
	"libraryType": "LIB",
	"scriptType": "SERVER",
	"comment": "Customization callbacks for download documents feature",
	"require": [ ]
}
*/

// eslint-disable-next-line no-redeclare
var Lib = Lib || {};
Lib.Customization = Lib.Customization || {};

/**
* Conversion function to create a file view from the flexible form JSON view
* @typedef {Type} Lib.Customization.DownloadDocuments.DownloadAttachInZipStruct
* @property {string} name Represents the name of the file in the archive
* @property {File} fileToDownload Represents the [File]{@link https://doc.esker.com/eskerondemand/cv_ly/en/manager/startpage.htm#ProcessingScripts/File/File_Object.html} to add to the archive. If set to null, the file is not added to the archive.
* @property {string} hash Represents the MD5 hash of the file (optionnal)
* @memberof Lib.Customization.DownloadDocuments
*/

Lib.Customization.DownloadDocuments = (function ()
{
	return {
		/**
		 * Server side User Exit
		 * Allows you to choose if the file passed as parameter should be added to the archive that is created when a user clicks the Download documents button.
		 * Refer to Allowing users to download documents for more information about this button.
		 * If the user exit is not defined, the original (not converted) document to process is added to the archive.
		 * The process associated with the view from which the user downloaded the files has generated transports. The user exit is called for all the attachments of these transports.
		 * @param {xAttach} attach [xAttach]{@link https://doc.esker.com/eskerondemand/cv_ly/en/manager/Content/ProcessingScripts/xEDDAPI/xAttach/xAttach_Object.html} object representing the file to add or not.
		 * @param {xVars} transportVars [xVars]{@link https://doc.esker.com/eskerondemand/cv_ly/en/manager/Content/ProcessingScripts/xEDDAPI/xVars/xVars_Object.html} object representing the variables of the transport generated by the process.
		 * @param {integer} index Integer value representing the index of the attachment in the transport generated by the process.
		 * @param {Map<string,string>} translation JavaScript object that contains all the translations of the process. The translations are in the language of the user who downloads the documents. The JavaScript object has the following format: { "key" : "translation", "key2" : "translation2", ... }
		 * @param {string} processName Name of the process
		 * @param {Lib.Customization.DownloadDocuments.DownloadAttachInZipStruct} defaultValue The value computed by Esker for this attachment, that would have been embeded in the zip file
		 * @return {Lib.Customization.DownloadDocuments.DownloadAttachInZipStruct|null} the description of the new attachment to embed in the zip file or null
		 * @example
		 * This user exit adds the converted file if it exists or the original file if the converted file does not exists.
		 * <pre><code>
		 * DownloadAttachInZip: function (attach, transportVars, index, translations, processName, defaultValue)
		 * {
		 *	 var fileToUse = attach.GetConvertedFile() || attach.GetInputFile();
		 *	 var documentType = transportVars.GetValue_String("Invoice_Type__", 0);
		 *	 var invoiceNumber = transportVars.GetValue_String("Invoice_number__", 0);
		 *	 var namePrefix = (documentType != "CREDIT_NOTE" ? translations["_Type Invoice"] : translations["_Type Credit Note"]);
		 *	 return {
		 *		 name: namePrefix + "-" + invoiceNumber + "-" + index + fileToUse.GetExtension(),
		 *		 fileToDownload: fileToUse,
		 *		 hash: attach.GetMD5("FileContent")
		 *	 };
		 * }
		 * </code></pre>
		 * @memberOf Lib.Customization.DownloadDocuments
		 */
		DownloadAttachInZip: function (attach, transportVars, index, translations, processName, defaultValue)
		{
			return defaultValue;
		},
		/**
		 * Server side User Exit
		 * Overrides the function called at the beginning of the processing of ZIP file in a process.
		 * @param {string} processName The current transport process name to convert in JSON
		 * @param {Sys.ZipDoc.RecordDetails.InitWithRuidEX} defaultInitFunction default init function
		 * @example
		 * When the process is “Vendor invoice”, the cache object exported from Lib.AP.ZipDoc.RecordDetails is filled in with all the data required to create an audit file.
		 * <pre><code>
		 * SetInitFunction: function(processName, defaultInitFunction)
		 * {
		 * 	if (processName === "Vendor invoice")
		 * 	{
		 * 		return function(sourceRUIDEx) {
		 * 			Lib.AP.ZipDoc.RecordDetails.Context.lineItems = getLineItems(sourceRUIDEx);
		 *	 	};
		 * 	}
		 *  return defaultInitFunction;
		 * }
		 * </code></pre>
		 * @memberOf Lib.Customization.DownloadDocuments
		 */
		SetInitFunction: function (processName, defaultInitFunction)
		{
			return defaultInitFunction;
		},
		/**
		 * Server side User Exit
		 * - Overrides the function build a JSON {Sys.ZipDoc.RecordDetails.Details} structure for audit data export.
		 * - Allows to define a custom handlebar template to generate an HTML page from the audit JSON object.
		 * @param {string} processName The current transport process name to convert in JSON
		 * @param {Sys.ZipDoc.RecordDetails.ConverterToJson} defaultJsonConverter Selected JSON conversion function (transportVars, translations, filenames) => {Sys.ZipDoc.RecordDetails.Details} before the UE call
		 * @param {Sys.ZipDoc.RecordDetails.HandleBarTemplate} defaultTemplate Selected handlebar function (Sys.ZipDoc.RecordDetails.Details) => {string} before the UE call
		 * @return {Sys.ZipDoc.RecordDetails.SetAuditFunctionsStruct}
		 * @example
		 * In the following example, an audit file is generated using the same handlebar template
		 * but the first section is changed to “Detailed header”.
		 * The JsonConvertor function is called to modify the JSON structure.
		 * <pre><code>
		 * SetAuditFunctions: function(processName, defaultJsonConverter, defaultTemplate)
		 * {
		 * 	return {
		 * 		converter : function(vars, translations, filenames) {
		 * 			var recordData = defaultJsonConverter(vars, translations, filenames);
		 * 			recordData.categories[0].title = "Detailed header";
		 * 			return recordData;
		 * 		},
		 * 		template : defaultTemplate
		 * 	}
		 * }
		 * </code></pre>
		 * You can implement your own function to generate a template other than the default one.
		 * This function needs to take recordData as a parameter and return a complete HTML string.
		 * The default template uses handlebars (“http://handlebarsjs.com/” ) but you can build the HTML string in your own way.
		 * @memberOf Lib.Customization.DownloadDocuments
		 */
		SetAuditFunctions: function (processName, defaultJsonConverter, defaultTemplate)
		{
			return defaultTemplate;
		},
		/**
		 * Server side User Exit
		 * Overrides the header for the audit file to create
		 * @param {string} previousHeader The default header used to generate the audit file if this user exit does not return anything.
		 * @return {string} The header string for the audit file to create
		 * @example
		 * A simple html header
		 * <pre><code>
		 * SetAuditHeader: function(previousHeader)
		 * {
		 * 	return `&lt;html&gt;
		 *   &lt;head&gt;
		 *        &lt;title&gt;Invoice audit&lt;/title&gt;
		 *   &lt;/head&gt;
		 *   &lt;body&gt;`;
		 * }
		 * </code></pre>
		 * @memberOf Lib.Customization.DownloadDocuments
		 */
		SetAuditHeader: function (previousHeader)
		{
			return previousHeader;
		},
		/**
		 * Server side User Exit
		 * Overrides the footer for the audit file to create
		 * @param {string} previousFooter The default footer used to generate the audit file this user exit does not return anything.
		 * @return {string} The footer string for the audit file to create
		 * @example
		 * A simple html footer
		 * <pre><code>
		 * SetAuditFooter: function(previousFooter)
		 * {
		 * 	return `&lt;/body&gt;
		 * &lt;/html&gt;`;
		 * }
		 * </code></pre>
		 * @memberOf Lib.Customization.DownloadDocuments
		 */
		SetAuditFooter: function (previousFooter)
		{
			return previousFooter;
		}
	};
})();
