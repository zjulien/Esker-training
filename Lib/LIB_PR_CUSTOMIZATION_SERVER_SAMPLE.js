/**
 * @file Lib.PR.Customization.Server library: server script Purchase Requisition customization callbacks
 */

/**
 * Package Purchase Requisition server script customization callbacks
 * @namespace Lib.PR.Customization.Server
 */

/* LIB_DEFINITION
{
	"name": "Lib_PR_Customization_Server",
	"libraryType": "LIB",
	"scriptType": "SERVER",
	"comment": "Custom library extending Purchase Requisition scripts on server side",
	"versionable" : false,
	"require": [ "Sys/Sys" ]
}
*/

///#GLOBALS Lib Sys
var Lib;
Sys.ExtendLib(Lib, "PR.Customization.Server", function ()
{
	/**
	 * @lends Lib.PR.Customization.Server
	 */
	var customization = {
		/**
		 * @description Allows you to customize the value of the fields available on the purchase requisition form.
		 * 		This user exit is called at the end of the extraction script of the Purchase Requisition process.
		 *		For example, you can fill in the purchase requisition with values coming from an XML file. This XML file
		 *		containing the data of a purchase requisition may have been generated by another tool (ERP, etc.).
		 *		After the extraction script, the purchase requisition can follow the usual approval workflow.
		 * @version 5.143 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function OnExtractionScriptEnd
		 * @example
		 * <pre><code>
		 * 	OnExtractionScriptEnd: function ()
		 * 	{
		 * 		// Sets the default currency
		 * 	 	Data.SetValue("Currency__", "USD");
		 * 	}
		 * </code></pre>
		 *
		*/
		OnExtractionScriptEnd: function ()
		{

		},

		/**
		 * @description Allows you to automate the purchase order creation under the conditions of your choice.
		 * 		This user exit is called in the validation script of the Purchase Requisition process.
		 * @version 5.110 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function IsAutoCreateOrderEnabled
		 * @returns {boolean} true: the order is automatically created, false the order is not automatically created
		 * @example
		 * <pre><code>
		 * 	IsAutoCreateOrderEnabled: function ()
		 * 	{
		 *		var itemsTable = Data.GetTable("LineItems__");
		 *		var firstItem = itemsTable.GetItem(0);
		 *		var firstItemVendorNumber, areSameVendors = true;
		 *		if (firstItem)
		 *		{
		 *			firstItemVendorNumber = firstItem.GetValue("VendorNumber__");
		 *		}
		 *		for (var i = itemsTable.GetItemCount() - 1; i > 0; i--)
		 *		{
		 *			var currentItemVendorNumber = itemsTable.GetItem(i).GetValue("VendorNumber__");
		 *			areSameVendors = areSameVendors && (currentItemVendorNumber === firstItemVendorNumber);
		 *		}
		 *
		 *		var totalNetAmount = Data.GetValue("TotalNetAmount__");
		 *
		 *		Log.Info("Auto Create PO - First item vendor number = ", firstItemVendorNumber);
		 *		Log.Info("Auto Create PO - Identical vendors on all lines = ", areSameVendors);
		 *		Log.Info("Auto Create PO - Total net amount = " + totalNetAmount);
		 *
		 *		var isCorrectVendor = firstItemVendorNumber === "01254796";
		 *		autoCreateOrder = areSameVendors && isCorrectVendor && totalNetAmount < 100;
		 *
		 *		Log.Info("Auto Create PO - is set to: ", autoCreateOrder);
		 *		return autoCreateOrder;
		 * 	}
		 * </code></pre>
		 *
		*/
		IsAutoCreateOrderEnabled: function ()
		{
			return false;
		},

		/**
		 * @description Allows you to override the user whose contract is used to bill the process.
		 * 		By default, the user who is the owner of the process at the process creation is the user whose contract is billed. If the owner is a group of users, the billed contract is the contract of the user who eventually validates the process.
		 * 		For versions 5.132 or higher of the Purchasing or Purchase to Pay application, the purchase requisition is billed when the requester submits it. The processingLabel variable for a purchase requisition is PA002 and must not be changed.
		 * 		For version 5.131 or lower of the Purchasing application, the purchase requisition is billed when all the goods have been received.
		 * 		For version 5.134 or higher of the Purchasing or Purchase to Payapplication, the archive is billed at the same time as the purchase requisition.
		 * @version 5.132 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function OnBilling
		 * @returns {boolean} Boolean value specifying whether the billing information has correctly been set:
		 *		true: The billing information is correct and the process can be approved.
		 *		false: The billing information is not correct and the process cannot be approved.
		 * @example
		 * <pre><code>
		 * 	OnBilling: function ()
		 * 	{
		 *		var info = { userId: "john@example.com" };
		 *		Log.Info("Set billing info: " + info.userId);
		 *		if (!Process.SetBillingInfo(info))
		 *		{
		 *			Log.Error("Error setting billing info: " + info.userId);
		 *			Process.PreventApproval();
		 *			return false;
		 *		}
		 *		return true;
		 * 	}
		 * </code></pre>
		 *
		*/
		OnBilling: function ()
		{
			return true;
		},

		/**
		 * @description Allows you to modify the email notifications. This user exit is called before the notification is sent.
		 * @version 5.134 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function OnSendEmailNotification
		 * @param {json} emailOptions JavaScript object specifying the email options
		 * @param {string} emailOptions.userId Identifier of the user who should receive the email notification.
		 * @param {string} emailOptions.subject	Subject of the email notification.
		 * @param {string} emailOptions.template Template used for the email notification.
		 * @param {string} emailOptions.fromName Name of the email sender.
		 * @param {boolean} emailOptions.backupUserAsCC Specifies if the email address of the delegate user should be added in the Cc field of the email notification:
		 *		true : the notification is sent.
		 *		false: the notification is not sent.
		 * @returns {boolean} Boolean value specifying whether the notification should be sent:
		 *		true: The email notification should be sent.
		 *		false: The email notification should not be sent.
		 * @example
		 * <pre><code>
		 * 	OnSendEmailNotification: function (emailOptions)
		 * {
		 *	 // The current email notification is the notification sent to the requester
		 *	 // to inform him that his purchase requisition has been rejected.
		 *	 if (emailOptions.subject === "_A purchase requisition has been rejected")
		 *	 {
		 *		 var workflow = Sys.WorkflowController.Create({ version: 1 });
		 *		 var options = {
		 *			 userId: workflow.GetContributorAt(1).login, // The recipient is the first approver.
		 *			 subject: emailOptions.subject,
		 *			 template: emailOptions.template,
		 *			 fromName: "Esker Purchase requisition",
		 *			 backupUserAsCC: emailOptions.backupUserAsCC
		 *		 };
		 *		 Lib.EmailNotification.SendEmailNotification(options);
		 *	 }
		 *	 return true;
		 * }
		 * </code></pre>
		 *
		*/
		OnSendEmailNotification: function (emailOptions)
		{
			return true;
		},

		/**
		 * @description Allows you to define additional information on the purchase requisition according to the recognized vendor.
		 * 		This user exit is called in the extraction script of the Purchase Requisition process, when a quotation has been uploaded and when a vendor has been recognized.
		 * @version 5.133 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function OnVendorRecognition
		 * @param {ESKMap<string>} result An ESKMap<string> object representing a record of the vendor table.
		 * 		Use the result.xxx with the fields of the AP - Vendors__ table to retrieve the vendor properties.
		 * @example
		 * <pre><code>
		 *	OnVendorRecognition: function (vendorRecord)
		 *	{
		 *		// This user exit updates the currency of the purchase requisition with the currency of the vendor recognized on the quotation:
		 *		Log.Info("Vendor recognized, currency= " + vendorRecord.Currency__);
		 *		Data.SetValue("Currency__", vendorRecord.Currency__);
		 *	}
		 * </code></pre>
		 *
		*/
		OnVendorRecognition: function (result)
		{
		},

		/**
		 * @description Allows you to customize how the action is processed when the validation script executes an unknown action.
		 *		This user exit is called when the validation script of the Purchase Requisition process is triggered by an unknown action.
		 * @version 5.148 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function OnUnknownAction
		 * @param {string} currentAction value specifying the type of action that triggered the execution of the script.
		 * 		This value is retrieved using the Processing scripts API: Data.GetActionType function.
		 * @param {string} currentName value specifying the name of the action that triggered the execution of the script.
		 * 		This value is retrieved using the Processing scripts API: Data.GetActionName function.
		 * @returns {boolean} Boolean value indicating whether the action has been handled. Possible values are:
		 * 		true: The action has been handled.
		 * 		false: The action has not been handled.
		 * @example
		 * <pre><code>
		 * 	OnUnknownAction: function (currentAction, currentName)
		 *	{
		 *		// This user exit logs the unknown actions details.
		 *		Log.Error(currentAction + "-" + currentName);
		 *	}
		 * }
		 * </code></pre>
		 *
		*/
		OnUnknownAction: function (currentAction, currentName)
		{
			return false;
		},

		/**
		 * @description Allows you to perform operations after the Purchase Requisition process validation.
		 * 		This user exit is called at the end of the validation script of the Purchase Requisition process.
		 * @version 5.149 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function OnValidationScriptEnd
		 * @param {string} currentAction value specifying the type of action that triggered the execution of the script.
		 * 		This value is retrieved using the Processing scripts API: Data.GetActionType function.
		 * @param {string} currentName value specifying the name of the action that triggered the execution of the script.
		 * 		This value is retrieved using the Processing scripts API: Data.GetActionName function.
		 * @param {boolean} isRecallScriptScheduled value indicating if the user exit is expected to be called again in the current workflow step.
		 * 		The validation script contains calls to the RecallScript function, thus the validation script is called several times at each workflow step.
		 * 		This parameter is set to false after the last execution of the RecallScript function.
		 * @example In the following example, a user is allow to read the Purchase Order.
		 * <pre><code>
		 *	OnValidationScriptEnd: function (currentAction, currentName, isRecallScriptScheduled)
		 *	{
		 *	 	Process.AddRight("john.more@example.com", "read")
		 *	}
		 * </code></pre>
		 *
		*/
		OnValidationScriptEnd: function (currentAction, currentName, isRecallScriptScheduled)
		{

		},

		/**
		 * @description Allows you to retrieve the next document number based on a customized numbering sequence. This user exit is called in the validation script of the Purchase Requisition, Purchase Order or Goods Receipt process, depending on the library in which it is located.
		 * @version 5.110 and higher
		 * @memberof Lib.PR.Customization.Server
		 * @function GetNumber
		 * @param {string} defaultSequenceName String value representing the name of the sequence that is retrieved by default, when this user exit is not implemented. To keep on using the default numbering, use it as is to retrieve numbers from the default sequence.
		 * @returns {string} String value containing the next number from your customized sequence.
		 * @example
		 * For example, when using the US01 and FR01 company codes with the above script, you could get the following numbering: US01-0001, US01-0002, US01-0003, FR01-0001, US01-0004, FR01-0002, etc.
		 * <pre><code>
		 * 	GetNumber: function (defaultSequenceName)
		 * 	{
		 * 		var number = "";
		 * 		var ReqNumberSequence = Process.GetSequence(defaultSequenceName);
		 * 		number = ReqNumberSequence.GetNextValue();
		 * 		if (number === "")
		 * 		{
		 * 			Log.Info("Error while retrieving a number");
		 * 		}
		 * 		else
		 * 		{
		 * 			Log.Info("Number:" + number);
		 * 		}
		 * 		return number;
		 *	}
		 * </code></pre>
		 *
		*/

		/*
		GetNumber: function (defaultSequenceName)
		{
			// Must return something
		}
		*/
	};

	return customization;
});
